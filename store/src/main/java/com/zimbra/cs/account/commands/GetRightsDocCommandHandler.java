package com.zimbra.cs.account.commands;

import com.zimbra.common.service.ServiceException;
import com.zimbra.common.util.StringUtil;
import com.zimbra.cs.account.ArgException;
import com.zimbra.cs.account.CommandHandler;
import com.zimbra.cs.account.FileGenUtil;
import com.zimbra.cs.account.ProvUtil;
import com.zimbra.cs.account.Provisioning;
import com.zimbra.cs.account.soap.SoapProvisioning;
import org.apache.http.HttpException;

import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class GetRightsDocCommandHandler implements CommandHandler {
  private final ProvUtil provUtil;

  public GetRightsDocCommandHandler(ProvUtil provUtil) {
    this.provUtil = provUtil;
  }

  @Override public void handle(String[] args) throws ServiceException, ArgException, HttpException, IOException {
    doGetRightsDoc(args);
  }

  private void doGetRightsDoc(String[] args) throws ServiceException {
    var prov = provUtil.getProvisioning();
    var console = provUtil.getConsole();
    if (!(prov instanceof SoapProvisioning)) {
      provUtil.throwSoapOnly();
    }
    String[] packages;

    StringBuilder argsDump = new StringBuilder();
    if (args.length > 1) {
      // args[0] is "grd", starting from args[1]
      packages = new String[args.length - 1];
      for (int i = 1; i < args.length; i++) {
        packages[i - 1] = args[i];
        argsDump.append(" ").append(args[i]);
      }
    } else {
      packages =
              new String[] {
                      "com.zimbra.cs.service.admin",
                      "com.zimbra.bp",
                      "com.zimbra.cert",
                      "com.zimbra.cs.network",
                      "com.zimbra.cs.network.license.service",
                      "com.zimbra.cs.service.backup",
                      "com.zimbra.cs.service.hsm",
                      "com.zimbra.xmbxsearch"
              };
    }

    console.println("#");
    console.println("#  Generated by: zmprov grd" + argsDump);
    console.println("#");
    console.println("#  Date: " + DateFormat.getDateInstance(DateFormat.LONG).format(new Date()));
    console.println("# ");
    console.println("#  Packages:");
    for (String pkg : packages) {
      console.println("#       " + pkg);
    }
    console.println("# ");
    console.println("\n");

    Map<String, List<Provisioning.RightsDoc>> allDocs = prov.getRightsDoc(packages);
    for (Map.Entry<String, List<Provisioning.RightsDoc>> docs : allDocs.entrySet()) {
      console.println("========================================");
      console.println("Package: " + docs.getKey());
      console.println("========================================");
      console.println();

      for (Provisioning.RightsDoc doc : docs.getValue()) {
        console.println("------------------------------");
        console.println(doc.getCmd() + "\n");

        console.println("    Related rights:");
        for (String r : doc.getRights()) {
          console.println("        " + r);
        }
        console.println();
        console.println("    Notes:");
        for (String n : doc.getNotes()) {
          console.println(
                  FileGenUtil.wrapComments(StringUtil.escapeHtml(n), 70, "        ") + "\n");
        }
        console.println();
      }
    }
  }
}
