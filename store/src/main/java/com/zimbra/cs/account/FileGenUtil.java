// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: GPL-2.0-only

package com.zimbra.cs.account;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;

import com.zimbra.common.util.ByteUtil;
import com.zimbra.common.util.StringUtil;
import com.zimbra.cs.account.AttributeManagerUtil.CLOptions;
import com.zimbra.cs.util.BuildInfo;

public class FileGenUtil {


    private static final String BEGIN_MARKER = "BEGIN-AUTO-GEN-REPLACE";

    private static final String END_MARKER  = "END-AUTO-GEN-REPLACE";

    public static String wrapComments(String comments, int maxLineLength, String prefix) {
        return wrapComments(comments, maxLineLength, prefix, null);
    }

    public static String genDoNotModifyDisclaimer(String prefix, String generatedBy) {
        return genDoNotModifyDisclaimer(prefix, generatedBy, null);
    }

    public static String genDoNotModifyDisclaimer(String prefix, String generatedBy, String version) {
        StringBuilder result = new StringBuilder();

        result.append(prefix + "\n");
        result.append(prefix + "\n");
        result.append(prefix + " DO NOT MODIFY - generated by " + generatedBy + "\n");
        result.append(prefix + " " + (version == null ? BuildInfo.FULL_VERSION : version) + "\n");
        result.append(prefix + "\n");
        result.append(prefix + "\n");

        return result.toString();
    }

    public static String wrapComments(String comments, int maxLineLength, String prefix, String suffix) {
        comments = comments.trim().replaceAll("\\s+", " ");
        StringBuilder result = new StringBuilder();
        String[] words = comments.split("\\s+");
        int lineLength = 0;
        for (String word : words) {
            if (lineLength + word.length() + 1> maxLineLength) {
                if (suffix != null) {
                    result.append(suffix);
                }
                result.append("\n");

                lineLength = 0;
            }
            if (lineLength == 0 && prefix != null) {
                result.append(prefix);
            }
            if (lineLength > 0) {
                result.append(' '); lineLength++;
            }
            result.append(word);
            lineLength += word.length();
        }
        if (result.length() == 0 && prefix != null) {
            result.append(prefix);
        }
        return result.toString();
    }


    public static void replaceJavaFile(String javaFile, String content) throws IOException {
       BufferedReader in = null;
       BufferedWriter out = null;

       File oldFile = new File(javaFile);
       if (!oldFile.canWrite()) {
           System.err.println("============================================");
           System.err.println("Unable to write to: "+javaFile);
           System.err.println("============================================");
           System.exit(1);
       }

       File newFile = new File(javaFile+"-autogen");

       try {
           out = new BufferedWriter(new FileWriter(newFile));
           in = new BufferedReader(new FileReader(oldFile));
           String line;
           boolean replaceMode = false;

           while((line = in.readLine()) != null) {
               if (line.indexOf(BEGIN_MARKER) != -1) {
                   out.write(line);
                   out.newLine();
                   out.write(content);
                   out.newLine();
                   replaceMode = true;
               } else if (line.indexOf(END_MARKER) != -1) {
                   replaceMode = false;
                   out.write(line);
                   out.newLine();
               } else if (!replaceMode){
                   out.write(line);
                   out.newLine();
               }
           }

           in.close();
           in = null;

           out.close();
           out = null;

           if (!newFile.renameTo(oldFile)) {
               System.err.println("============================================");
               System.err.format("Unable to rename(%s) to (%s)%n", newFile.getName(), oldFile);
               System.err.println("============================================");
               System.exit(1);
           }

           System.out.println("======================================");
           System.out.println("generated: "+javaFile);
           System.out.println("======================================");

       } finally {
           if (in != null) in.close();
           if (out != null) out.close();
       }
   }

    public static void replaceFile(String outFile, String templateFile, Map<String,String> templateFillers)
    throws IOException {
        byte[] templateBytes = ByteUtil.getContent(new File(templateFile));
        String templateString = new String(templateBytes, "utf-8");

        String content = StringUtil.fillTemplate(templateString, templateFillers);

        writeToFileFile(outFile, content);
    }

    public static void replaceFile(String outFile, String content) throws IOException {
        writeToFileFile(outFile, content);
    }

    private static void writeToFileFile(String outFile, String content) throws IOException {

        File oldFile = new File(outFile);
        if (!oldFile.canWrite()) {
            System.err.println("============================================");
            System.err.println("Unable to write to: "+outFile);
            System.err.println("============================================");
            System.exit(1);
        }

        BufferedWriter out = null;
        File newFile = new File(outFile+"-autogen");

        try {
            out = new BufferedWriter(new FileWriter(newFile));
            out.write(content);

            out.close();
            out = null;

            if (!newFile.renameTo(oldFile)) {
                System.err.println("============================================");
                System.err.format("Unable to rename(%s) to (%s)%n", newFile.getName(), oldFile);
                System.err.println("============================================");
                System.exit(1);
            }

            System.out.println("======================================");
            System.out.println("generated: "+outFile);
            System.out.println("======================================");

        } finally {
            if (out != null) out.close();
        }
    }

}
