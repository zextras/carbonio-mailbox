// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: GPL-2.0-only

/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package com.zimbra.cs.index.query.parser;

/** Token Manager. */
class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 10;
            return 50;
         }
         if ((active0 & 0x1a000800000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 10;
            return 1;
         }
         if ((active0 & 0x88800000L) != 0L)
         {
            jjmatchedKind = 10;
            return 37;
         }
         if ((active0 & 0xfee1f8f7777f0000L) != 0L || (active1 & 0x1dfL) != 0L)
         {
            jjmatchedKind = 10;
            return 58;
         }
         return -1;
      case 1:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
            return 36;
         }
         if ((active0 & 0xfefff8ff7fff0000L) != 0L || (active1 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
            return 58;
         }
         return -1;
      case 2:
         if ((active0 & 0xfefff8fbdebf0000L) != 0L || (active1 & 0x1feL) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 2;
            return 58;
         }
         return -1;
      case 3:
         if ((active0 & 0xfeffd8fadebf0000L) != 0L || (active1 & 0x1f6L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
            return 58;
         }
         return -1;
      case 4:
         if ((active0 & 0xfa7e90fada3f0000L) != 0L || (active1 & 0xa4L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
            return 58;
         }
         return -1;
      case 5:
         if ((active0 & 0xfa7c00ea9a330000L) != 0L || (active1 & 0xa4L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 5;
            return 58;
         }
         return -1;
      case 6:
         if ((active0 & 0xba7800e290330000L) != 0L || (active1 & 0x24L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
            return 58;
         }
         return -1;
      case 7:
         if ((active0 & 0xb87800a090000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 7;
            return 58;
         }
         return -1;
      case 8:
         if ((active0 & 0x3828000000000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 8;
            return 58;
         }
         return -1;
      case 9:
         if ((active0 & 0x828000000000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 9;
            return 58;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 13:
         return jjStopAtPos(0, 73);
      case 40:
         return jjStopAtPos(0, 3);
      case 41:
         return jjStopAtPos(0, 4);
      case 43:
         return jjStopAtPos(0, 8);
      case 45:
         return jjStopAtPos(0, 9);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x1a000800000000L, 0x20L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_1(0x4000000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x3c60004001210000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x280000000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x180000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x88800000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x20000000L, 0x43L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_1(0x2000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_1(0x4000908600040000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x280000000020000L, 0x180L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x1116400000L, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_1(0x40000000L, 0x4L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_1(0x1000000000000L, 0x0L);
      default :
         return jjMoveNfa_1(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x280100000000L, active1, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x540a200000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x80001080000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x60180000L, active1, 0x6L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x7c60804016610000L, active1, 0x180L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x18000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000008800000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000L, active1, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x60L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x800020000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x201100000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000040000000L, active1, 0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000L, active1, 0x40L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000012000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x100040000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000000000000L, active1, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x3c60800000210000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x8800000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x18000000000000L, active1, 0x10L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x180L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000L, active1, 0x8L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x2089800000000L, active1, 0x20L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0x180000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_1(active0, 0x202000000000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 32);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 45);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(3, 67);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000L, active1, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x820800c0000000L, active1, 0x14L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x200001000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_1(active0, 0x8800000L, active1, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x8004000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000012000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000200000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x18900000290000L, active1, 0x180L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x3c60000000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_1(active0, 0x3878000000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(4, 23);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 48);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 55);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(4, 58);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(4, 65);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(4, 68);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(4, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(4, 72);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x4200200000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000L, active1, 0x20L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000040000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000101000030000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x2812080000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x8006000040100000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 30);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(5, 36);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 44);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(5, 47);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x8080000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000008220000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_1(active0, 0x254000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000000000L, active1, 0x4L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x3000000012000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000010000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x100000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x2800000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_1(active0, 0x28000000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 50);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 62);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(6, 71);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000L, active1, 0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_1(active0, 0x80100000L, active1, 0x20L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_1(active0, 0x50000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_1(active0, 0x8028008000230000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(7, 17);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(7, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(7, 21);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 33);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(7, 38);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(7, 57);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(7, 66);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x28008000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x10000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_1(active0, 0x50000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x80000000L, active1, 0x20L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x1000000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0x800000000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000000000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_1(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(8, 37);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(8, 39);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(8, 52);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(8, 54);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 63);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_1(active0, 0x3000000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x800000000000000L, active1, 0x20L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x28000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(9, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(9, 61);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_1(active0, 0x828000000000000L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(10, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(10, 53);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(10, 59);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(10, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0, active1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 37:
               case 14:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 50:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 1:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 36:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 58:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 2:
                  if ((0xfbffd4faffffd9ffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(14, 16);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 35)
                     jjAddStates(3, 4);
                  else if (curChar == 33)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 38 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 33 && kind > 7)
                     kind = 7;
                  break;
               case 13:
                  if ((0xfbffd4faffffd9ffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 15:
                  if (curChar != 34)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 18:
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 22:
                  if (curChar == 34 && kind > 13)
                     kind = 13;
                  break;
               case 24:
                  jjAddStates(5, 6);
                  break;
               case 28:
                  if ((0xfbffd4faffffd9ffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if ((0xfbfffcfaffffd9ffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 30:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 33:
                  if (curChar == 58 && kind > 40)
                     kind = 40;
                  break;
               case 39:
                  if (curChar == 35)
                     jjAddStates(3, 4);
                  break;
               case 40:
                  if ((0xfbffd4faffffd9ffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 41:
                  if ((0xfbfffcfaffffd9ffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 42:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 45:
                  if (curChar == 58 && kind > 56)
                     kind = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(14, 16);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 50:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(14, 16);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(14, 16);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 36:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(14, 16);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 58:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(14, 16);
                  }
                  if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 2:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(14, 16);
                  }
                  else if (curChar == 123)
                     jjCheckNAdd(24);
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 92)
                     jjCheckNAdd(15);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 0:
                  if ((0x1000000010L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 124 && kind > 6)
                     kind = 6;
                  break;
               case 8:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x10000000100000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 14:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 16:
                  if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  jjAddStates(0, 2);
                  break;
               case 23:
                  if (curChar == 123)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 125 && kind > 15)
                     kind = 15;
                  break;
               case 26:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddTwoStates(27, 33);
                  break;
               case 27:
                  if (curChar == 91)
                     jjAddStates(13, 14);
                  break;
               case 28:
               case 29:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
               case 34:
                  if (curChar == 92)
                     jjCheckNAdd(30);
                  break;
               case 32:
                  if (curChar == 93)
                     jjCheckNAdd(33);
                  break;
               case 35:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 38:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
               case 41:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 43:
               case 44:
                  if (curChar == 92)
                     jjCheckNAdd(42);
                  break;
               case 46:
               case 52:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 37:
               case 14:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 50:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 36:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 58:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(14, 16);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(5, 6);
                  break;
               case 28:
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(7, 9);
                  break;
               case 40:
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 3);
      case 41:
         return jjStopAtPos(0, 4);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfbffd4faffffd9ffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(1, 3);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 1:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar != 34)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 5:
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 8:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 9:
                  if (curChar == 34 && kind > 13)
                     kind = 13;
                  break;
               case 11:
                  jjAddStates(18, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(1, 3);
                  }
                  else if (curChar == 123)
                     jjCheckNAdd(11);
                  if (curChar == 92)
                     jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 3:
                  if (curChar == 92)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 92)
                     jjCheckNAdd(2);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  jjAddStates(15, 17);
                  break;
               case 10:
                  if (curChar == 123)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 125 && kind > 15)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   20, 21, 22, 40, 44, 24, 25, 29, 31, 32, 41, 43, 33, 28, 34, 7, 
   8, 9, 11, 12, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\50", "\51", null, null, null, "\53", "\55", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\15", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "TEXT",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffff9ffffffa7f9L, 0x3ffL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[58];
private final int[] jjstateSet = new int[116];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 58; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
