// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: GPL-2.0-only

package com.zimbra.cs.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Connection wrapper that uses RetryPreparedStatement
 *
 */
public class RetryConnection extends DebugConnection {

    RetryConnection(Connection conn) {
        super(conn);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql) throws SQLException {
        final RetryConnection conn = this;
        AbstractRetry<PreparedStatement> exec = new AbstractRetry<PreparedStatement>() {
            @Override
            public ExecuteResult<PreparedStatement> execute() throws SQLException {
                return new ExecuteResult<PreparedStatement>(
                        new RetryPreparedStatement(conn, mConn.prepareStatement(sql), sql));
            }
        };
        return exec.doRetry().getResult();
    }


    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType,
                                              final int resultSetConcurrency)
    throws SQLException {
        final RetryConnection conn = this;
        AbstractRetry<PreparedStatement> exec = new AbstractRetry<PreparedStatement>() {
            @Override
            public ExecuteResult<PreparedStatement> execute() throws SQLException {
                return new ExecuteResult<PreparedStatement>(
                        new RetryPreparedStatement(conn, mConn.prepareStatement(
                                sql, resultSetType, resultSetConcurrency), sql));
            }
        };
        return exec.doRetry().getResult();
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType,
                                              final int resultSetConcurrency,
                                              final int resultSetHoldability)
    throws SQLException {
        final RetryConnection conn = this;
        AbstractRetry<PreparedStatement> exec = new AbstractRetry<PreparedStatement>() {
            @Override
            public ExecuteResult<PreparedStatement> execute() throws SQLException {
                return new ExecuteResult<PreparedStatement>(new RetryPreparedStatement(
                        conn, mConn.prepareStatement(sql, resultSetType,
                                resultSetConcurrency, resultSetHoldability), sql));
            }
        };
        return exec.doRetry().getResult();
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys)
    throws SQLException {
        final RetryConnection conn = this;
        AbstractRetry<PreparedStatement> exec = new AbstractRetry<PreparedStatement>() {
            @Override
            public ExecuteResult<PreparedStatement> execute() throws SQLException {
                return new ExecuteResult<PreparedStatement>(new RetryPreparedStatement(
                        conn, mConn.prepareStatement(sql, autoGeneratedKeys), sql));
            }
        };
        return exec.doRetry().getResult();
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes)
    throws SQLException {
        final RetryConnection conn = this;
        AbstractRetry<PreparedStatement> exec = new AbstractRetry<PreparedStatement>() {
            @Override
            public ExecuteResult<PreparedStatement> execute() throws SQLException {
                return new ExecuteResult<PreparedStatement>(new RetryPreparedStatement(
                        conn, mConn.prepareStatement(sql, columnIndexes), sql));
            }
        };
        return exec.doRetry().getResult();
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final String[] columnNames)
        throws SQLException {
        final RetryConnection conn = this;
        AbstractRetry<PreparedStatement> exec = new AbstractRetry<PreparedStatement>() {
            @Override
            public ExecuteResult<PreparedStatement> execute() throws SQLException {
                return new ExecuteResult<PreparedStatement>(new RetryPreparedStatement(
                        conn, mConn.prepareStatement(sql, columnNames), sql));
            }
        };
        return exec.doRetry().getResult();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void commit() throws SQLException {
        AbstractRetry exec = new AbstractRetry () {
            @Override
            public ExecuteResult execute() throws SQLException {
                superCommit();
                return null;
            }
        };
        exec.doRetry();
    }
    
    private void superCommit() throws SQLException {
        super.commit();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void rollback() throws SQLException {
        AbstractRetry exec = new AbstractRetry () {
            @Override
            public ExecuteResult execute() throws SQLException {
                superRollback();
                return null;
            }
        };
        exec.doRetry();
    }
    
    private void superRollback() throws SQLException {
        super.rollback();
    }
}
